{"version":3,"sources":["components/Helper/Image/index.js","components/MovieItem/index.js","components/SkeletonLoader/index.js","utils/helper.js","App.js","reportWebVitals.js","index.js"],"names":["Image","props","React","useState","isLoaded","setIsLoaded","Fragment","className","alt","src","thumbnail","width","height","onLoad","MovieItem","data","title","poster_path","release_date","style","split","SkeletonLoader","count","API_KEY","process","movieUtilityHandler","filterType","currentPage","searchMovieText","searchQuery","App","totalPage","setTotalPage","setFilterType","setCurrentPage","moviesData","setMoviesData","setSearchMovieText","changeHandler","event","target","value","debouncedChangeHandler","useMemo","debounce","fetchData","useCallback","a","axios","get","result","results","total_pages","useEffect","cancel","type","placeholder","onChange","dataLength","length","next","loader","Array","from","keys","map","e","index","hasMore","endMessage","filter","movieData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ababdbfd.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nconst Image = props => {\n    const [isLoaded, setIsLoaded] = React.useState(false);\n\n    return (\n        <React.Fragment>\n            <img\n                className={`image image--thumb ${isLoaded ? \"image--thumb-loaded\" : \"image--thumb-not-loaded\"}`}\n                alt={props.alt}\n                src={props.thumbnail}\n                width={props.width}\n                height={props.height}\n            />\n            <img\n                onLoad={() => {\n                    setIsLoaded(true);\n                }}\n                className={`image image--full ${isLoaded ? \"image--loaded\" : \"image--not-loaded\"}`}\n                width={props.width}\n                height={props.height}\n                alt={props.alt}\n                src={props.src}\n            />\n        </React.Fragment>\n    );\n};\n\nexport default Image;","import './style.css'\nimport Image from '../Helper/Image';\n\nexport default function MovieItem({data, width, height}) {\n    const {title, poster_path, release_date} = data;\n\n    const thumbnail = 'https://image.tmdb.org/t/p/w200/' + poster_path\n    const src = 'https://image.tmdb.org/t/p/w500/' + poster_path\n\n    return (\n        <div className=\"movie-item--container\" style={{width, height}}>\n            <Image alt={title} src={src} thumbnail={thumbnail} width={width} height={height} />\n            <div className=\"movie-item--overlay\"></div>\n            <div className=\"movie-item--overlay-text\">\n                <p className=\"movie-item--title movie-item--title-1\">{title}</p>\n                <br/>\n                <p className=\"movie-item--title movie-item--title-2\">{release_date.split(\"-\")[0]}</p>\n            </div>\n        </div>\n    )\n}","import Skeleton from \"react-loading-skeleton\";\n\nexport default function SkeletonLoader({height, width}){\n    return (\n        <Skeleton count={1} height={height} width={width}/>\n    )\n}","\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nexport const movieUtilityHandler = (filterType, props) => {\n    const { currentPage, searchMovieText } = props;\n\n    let searchQuery = 'https://api.themoviedb.org/3';\n\n    if(filterType === 'SEARCH' && searchMovieText){\n        searchQuery += `/search/movie?api_key=${API_KEY}&query=${searchMovieText}`\n    } else {\n        searchQuery += `/discover/movie?api_key=${API_KEY}`\n    }\n\n    if(currentPage){\n        searchQuery += `&page=${currentPage}`\n    }\n\n    return searchQuery;\n}","import './App.css';\n\nimport axios from 'axios';\nimport { useEffect, useState, useCallback, useMemo } from 'react';\nimport debounce from 'lodash.debounce';\nimport InfiniteScroll from 'react-infinite-scroll-component'\n\nimport MovieItem from './components/MovieItem';\nimport SkeletonLoader from './components/SkeletonLoader'\nimport { movieUtilityHandler } from './utils/helper';\n\nconst height = 300;\nconst width = 200;\n\nfunction App() {\n  const [totalPage, setTotalPage] = useState(null);\n  const [filterType, setFilterType] = useState('DISCOVER');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [moviesData, setMoviesData] = useState([]);\n  const [searchMovieText, setSearchMovieText] = useState('');\n\n  const resetState = () => {\n    setMoviesData([]);\n    setCurrentPage(1);\n  }\n\n  const changeHandler = (event) => {\n    resetState();\n    setSearchMovieText(event.target.value);\n  };\n\n  const debouncedChangeHandler = useMemo(\n    () => debounce(changeHandler, 150)\n    , []);\n\n  const fetchData = useCallback(async () => {\n    const result = await axios.get(movieUtilityHandler(filterType, { currentPage, searchMovieText }));\n    const data = result.data;\n\n    setCurrentPage(currentPage + 1);\n    setMoviesData([...moviesData, ...data.results]);\n    setTotalPage(data.total_pages)\n  }, [moviesData, currentPage, filterType, searchMovieText])\n\n  useEffect(() => {\n    fetchData();\n  }, [])\n\n  useEffect(() => {\n    if (searchMovieText && searchMovieText !== '')\n      setFilterType('SEARCH')\n    else\n      setFilterType('DISCOVER')\n\n    fetchData();\n  }, [searchMovieText])\n\n  useEffect(() => {\n    return () => {\n      debouncedChangeHandler.cancel();\n    }\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <div>\n        <input className=\"search-bar--input\" type=\"text\" placeholder=\"Search a movie\" onChange={debouncedChangeHandler} />\n      </div>\n\n      <InfiniteScroll\n        dataLength={moviesData.length}\n        next={fetchData}\n        loader={<div className=\"movie-container\">{Array.from(Array(20).keys()).map((e, index) => <SkeletonLoader key={index} height={height} width={width} />)}</div>}\n        hasMore={currentPage < totalPage}\n        endMessage={<hr/>}\n      >\n        <div className=\"movie-container\">\n          {moviesData.filter((movieData) => movieData.poster_path !== null).map((movieData, index) => <MovieItem key={index} data={movieData} height={height} width={width} />)}\n        </div>\n\n      </InfiniteScroll>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}