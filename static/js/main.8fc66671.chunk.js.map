{"version":3,"sources":["components/Navbar/index.js","components/Helper/Image/index.js","components/MovieItem/index.js","components/SkeletonLoader/index.js","utils/helper.js","App.js","reportWebVitals.js","index.js"],"names":["filterTypes","key","value","Navbar","setFilterType","selectedFilterType","resetState","setSearchMovieText","changeHandler","event","target","debouncedChangeHandler","useMemo","debounce","useEffect","cancel","className","map","filterType","onClick","type","placeholder","onChange","Image","props","React","useState","isLoaded","setIsLoaded","Fragment","alt","src","thumbnail","width","height","onLoad","MovieItem","data","title","poster_path","release_date","style","split","SkeletonLoader","count","API_KEY","process","movieUtilityHandler","currentPage","searchMovieText","searchQuery","App","totalPage","setTotalPage","setNextPage","moviesData","setMoviesData","fetchData","useCallback","a","nextData","console","log","axios","get","result","results","total_pages","setTimeout","dataLength","length","next","loader","Array","from","keys","e","index","hasMore","endMessage","filter","movieData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8fc66671.chunk.js","sourcesContent":["import './style.css';\nimport { useEffect, useMemo } from 'react';\nimport debounce from 'lodash.debounce';\n\nconst filterTypes = [\n    { key: 'POPULAR', value: 'Popular' },\n    { key: 'TOPRATED', value: 'Top Rated' },\n    { key: 'UPCOMING', value: 'Upcoming' },\n]\n\nexport default function Navbar({ setFilterType, selectedFilterType, resetState, setSearchMovieText }) {\n\n    const changeHandler = (event) => {\n        resetState();\n        setSearchMovieText(event.target.value);\n    };\n\n    const debouncedChangeHandler = useMemo(() => debounce(changeHandler, 150), []);\n\n    useEffect(() => {\n        return () => {\n            debouncedChangeHandler.cancel();\n        }\n    }, []);\n\n    return (\n        <div className=\"navbar-container\">\n            {\n                filterTypes.map((filterType) =>\n                    <button\n                        key={filterType.value}\n                        className={`${filterType.key === selectedFilterType ? 'active' : ''} navbar-container--button`}\n                        onClick={() => setFilterType(filterType.key)}\n                    >\n                        {filterType.value}\n                    </button>\n                )\n            }\n            <input className='navbar-container--input' type=\"text\" placeholder=\"Search for a movie...\" onChange={debouncedChangeHandler}/>\n        </div>\n    )\n}","import React from \"react\";\nimport \"./style.css\";\n\nconst Image = props => {\n    const [isLoaded, setIsLoaded] = React.useState(false);\n\n    return (\n        <React.Fragment>\n            <img\n                className={`image image--thumb ${isLoaded ? \"image--thumb-loaded\" : \"image--thumb-not-loaded\"}`}\n                alt={props.alt}\n                src={props.thumbnail}\n                width={props.width}\n                height={props.height}\n            />\n            <img\n                onLoad={() => {\n                    setIsLoaded(true);\n                }}\n                className={`image image--full ${isLoaded ? \"image--loaded\" : \"image--not-loaded\"}`}\n                width={props.width}\n                height={props.height}\n                alt={props.alt}\n                src={props.src}\n            />\n        </React.Fragment>\n    );\n};\n\nexport default Image;","import './style.css'\nimport Image from '../Helper/Image';\n\nexport default function MovieItem({data, width, height}) {\n    const {title, poster_path, release_date} = data;\n\n    const thumbnail = 'https://image.tmdb.org/t/p/w200/' + poster_path\n    const src = 'https://image.tmdb.org/t/p/w500/' + poster_path\n\n    return (\n        <div className=\"movie-item--container\" style={{width, height}}>\n            <Image alt={title} src={src} thumbnail={thumbnail} width={width} height={height} />\n            <div className=\"movie-item--overlay\"></div>\n            <div className=\"movie-item--overlay-text\">\n                <p className=\"movie-item--title movie-item--title-1\">{title}</p>\n                <br/>\n                <p className=\"movie-item--title movie-item--title-2\">{release_date.split(\"-\")[0]}</p>\n            </div>\n        </div>\n    )\n}","import Skeleton from \"react-loading-skeleton\";\n\nexport default function SkeletonLoader({height, width}){\n    return (\n        <Skeleton count={1} height={height} width={width}/>\n    )\n}","\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nexport const movieUtilityHandler = (filterType, props) => {\n    const { currentPage, searchMovieText } = props;\n\n    let searchQuery = 'https://api.themoviedb.org/3';\n\n    if(filterType === 'SEARCH' && searchMovieText){\n        searchQuery += `/search/movie?api_key=${API_KEY}&query=${searchMovieText}`\n    } else if (filterType === 'TOPRATED') {\n        searchQuery += `/movie/top_rated?api_key=${API_KEY}`\n    } else if (filterType === 'UPCOMING') {\n        searchQuery += `/movie/upcoming?api_key=${API_KEY}`\n    } else {\n        searchQuery += `/movie/popular?api_key=${API_KEY}`\n    }\n\n    if(currentPage){\n        searchQuery += `&page=${currentPage}`\n    }\n\n    return searchQuery;\n}","import './App.css';\n\nimport axios from 'axios';\nimport { useEffect, useState, useCallback } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component'\n\nimport Navbar from './components/Navbar';\nimport MovieItem from './components/MovieItem';\nimport SkeletonLoader from './components/SkeletonLoader'\nimport { movieUtilityHandler } from './utils/helper';\n\nconst height = 300;\nconst width = 200;\n\nfunction App() {\n  const [totalPage, setTotalPage] = useState(null);\n  const [filterType, setFilterType] = useState('POPULAR');\n  const [currentPage, setNextPage] = useState(1);\n  const [moviesData, setMoviesData] = useState([]);\n  const [searchMovieText, setSearchMovieText] = useState('');\n\n  const resetState = () => {\n    setMoviesData([]);\n    setNextPage(1);\n  }\n\n  const fetchData = useCallback(async (nextData = false) => {\n    console.log({currentPage, nextData});\n    const result = await axios.get(movieUtilityHandler(filterType, { currentPage: nextData ? currentPage : 1, searchMovieText }));\n    const data = result.data;\n\n    \n    if(nextData){\n      setNextPage(currentPage + 1);\n      setMoviesData([...moviesData, ...data.results]);\n    }\n    else{\n      setNextPage(2);\n      setMoviesData(data.results);\n    }\n\n    setTotalPage(data.total_pages)\n  }, [moviesData, currentPage, filterType, searchMovieText])\n\n  useEffect(() => {\n    resetState();\n\n    setTimeout(() => {\n      fetchData();\n    }, 500)\n  }, [filterType])\n\n  useEffect(() => {\n    resetState();\n    \n    if (searchMovieText && searchMovieText !== '')\n      setFilterType('SEARCH')\n    else\n      setFilterType('POPULAR')\n\n    setTimeout(() => {\n      fetchData();\n    }, 500)\n  }, [searchMovieText])\n\n  return (\n    <>\n      <Navbar setFilterType={setFilterType} selectedFilterType={filterType} resetState={resetState} setSearchMovieText={setSearchMovieText}/>\n      <div className=\"container\">\n        <InfiniteScroll\n          dataLength={moviesData.length}\n          next={() => fetchData(true)}\n          loader={<div className=\"movie-container\">{Array.from(Array(20).keys()).map((e, index) => <SkeletonLoader key={index} height={height} width={width} />)}</div>}\n          hasMore={currentPage < totalPage}\n          endMessage={<hr />}\n        >\n          <div className=\"movie-container\">\n            {\n              moviesData\n                .filter((movieData) => movieData.poster_path !== null && movieData.release_date)\n                .map((movieData, index) => <MovieItem key={index} data={movieData} height={height} width={width} />)\n            }\n          </div>\n\n        </InfiniteScroll>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}